//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Controlls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controlls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controlls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controlls"",
    ""maps"": [
        {
            ""name"": ""BubbleSelecting"",
            ""id"": ""1c85e00b-01fc-486a-bdd9-405abebcb085"",
            ""actions"": [
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""6813e283-8c95-408a-9a53-026cd0be7cad"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9ab023b7-b5c0-4eb1-b98b-1ef3b79c1e5d"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // BubbleSelecting
        m_BubbleSelecting = asset.FindActionMap("BubbleSelecting", throwIfNotFound: true);
        m_BubbleSelecting_Select = m_BubbleSelecting.FindAction("Select", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // BubbleSelecting
    private readonly InputActionMap m_BubbleSelecting;
    private List<IBubbleSelectingActions> m_BubbleSelectingActionsCallbackInterfaces = new List<IBubbleSelectingActions>();
    private readonly InputAction m_BubbleSelecting_Select;
    public struct BubbleSelectingActions
    {
        private @Controlls m_Wrapper;
        public BubbleSelectingActions(@Controlls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Select => m_Wrapper.m_BubbleSelecting_Select;
        public InputActionMap Get() { return m_Wrapper.m_BubbleSelecting; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BubbleSelectingActions set) { return set.Get(); }
        public void AddCallbacks(IBubbleSelectingActions instance)
        {
            if (instance == null || m_Wrapper.m_BubbleSelectingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BubbleSelectingActionsCallbackInterfaces.Add(instance);
            @Select.started += instance.OnSelect;
            @Select.performed += instance.OnSelect;
            @Select.canceled += instance.OnSelect;
        }

        private void UnregisterCallbacks(IBubbleSelectingActions instance)
        {
            @Select.started -= instance.OnSelect;
            @Select.performed -= instance.OnSelect;
            @Select.canceled -= instance.OnSelect;
        }

        public void RemoveCallbacks(IBubbleSelectingActions instance)
        {
            if (m_Wrapper.m_BubbleSelectingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBubbleSelectingActions instance)
        {
            foreach (var item in m_Wrapper.m_BubbleSelectingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BubbleSelectingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BubbleSelectingActions @BubbleSelecting => new BubbleSelectingActions(this);
    public interface IBubbleSelectingActions
    {
        void OnSelect(InputAction.CallbackContext context);
    }
}
